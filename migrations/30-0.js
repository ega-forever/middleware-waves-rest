
module.exports.id = '30.0';

const _ = require('lodash'),
  config = require('../config');

/**
 * @description flow 0 update
 * @param done
 */
   

module.exports.up = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.update({"path":"0","type":"flows"}, {
    $set: {"path":"0","body":[{"id":"f71e4f8.f819fb","type":"http in","z":0,"name":"events","url":"/events","method":"get","upload":false,"swaggerDoc":"","x":120,"y":217.5,"wires":[["12e2a4a.b20b25b"]]},{"id":"12e2a4a.b20b25b","type":"function","z":0,"name":"transform params","func":"\nconst factories = global.get('factories');\nconst _ = global.get('_');\n\n\nmsg.payload = _.chain(factories.sm)\n    .values()\n    .map(value => \n      _.chain(value).get('abi')\n        .filter({type: 'event'})\n        .value()\n    )\n    .flattenDeep()\n    .map(ev=>ev.name)\n    .uniq()\n    .value();\n\nreturn msg;","outputs":1,"noerr":0,"x":322.500003814697,"y":217.499998092651,"wires":[["c49a5649.c046a8"]]},{"id":"c49a5649.c046a8","type":"http response","z":0,"name":"","statusCode":"","headers":{},"x":547.500015258789,"y":216.25000333786,"wires":[]},{"id":"5a97720b.d0cc1c","type":"http in","z":0,"name":"get event","url":"/events/:event","method":"get","upload":false,"swaggerDoc":"","x":135,"y":401.25,"wires":[["b1cd37e5.74a048"]]},{"id":"26896dec.5a53d2","type":"function","z":0,"name":"transform params","func":"\nmsg.payload = {\n    model: msg.req.params.event,\n    request: msg.payload.criteria,\n    options: msg.payload.options\n};\n\n\n\nreturn msg;","outputs":1,"noerr":0,"x":536.5000305175781,"y":393.2500247955322,"wires":[["5b0b9e21.6451c","e9709d6.a4ad16"]]},{"id":"2858f1ab.675c5e","type":"http response","z":0,"name":"","statusCode":"","x":956.5,"y":400,"wires":[]},{"id":"b1cd37e5.74a048","type":"query-to-mongo","z":0,"request_type":"0","name":"query-to-mongo","x":312.0000305175781,"y":396.0000238418579,"wires":[["26896dec.5a53d2"]]},{"id":"5b0b9e21.6451c","type":"mongo","z":0,"model":"","request":"","options":"","name":"mongo","mode":"1","requestType":"0","dbAlias":"primary.data","x":775.0001258850098,"y":421.0000705718994,"wires":[["2858f1ab.675c5e","e9709d6.a4ad16"]]},{"id":"98d44384.a7dde","type":"catch","z":0,"name":"","scope":null,"x":320,"y":591,"wires":[["555b9a3a.231ad4","bd6bd81f.7b0788"]]},{"id":"5410ef0.54afe1","type":"http response","z":0,"name":"","statusCode":"","x":777,"y":592,"wires":[]},{"id":"555b9a3a.231ad4","type":"function","z":0,"name":"transform","func":"\nlet factories = global.get(\"factories\"); \n\nmsg.payload = factories.messages.generic.fail;\n    \nreturn msg;","outputs":1,"noerr":0,"x":561,"y":591,"wires":[["5410ef0.54afe1"]]},{"id":"bd6bd81f.7b0788","type":"debug","z":0,"name":"","active":true,"console":"false","complete":"false","x":501.5,"y":515.3333740234375,"wires":[]},{"id":"e9709d6.a4ad16","type":"debug","z":0,"name":"","active":true,"console":"false","complete":"false","x":736.5,"y":302.66668701171875,"wires":[]},{"id":"a3affcb5.14578","type":"http in","z":0,"name":"sc create","url":"/sc","method":"post","upload":false,"swaggerDoc":"","x":158,"y":132,"wires":[["771c4544.c5ba3c"]]},{"id":"4c8b8f08.ca0e9","type":"http response","z":0,"name":"","statusCode":"","x":565.5,"y":134.75,"wires":[]},{"id":"771c4544.c5ba3c","type":"async-function","z":0,"name":"super2","func":"const factories = global.get('factories');\nconst _ = global.get('_');\nconst web3 = global.get('web3');\nconst contract = global.get('truffle-contract');\n\n    const accounts = await Promise.promisify(web3.eth.getAccounts)(),\n    callContract = contract(factories.sm.UserManager);\n    \n    \n      callContract.setProvider(web3.currentProvider);\n      let callContractInstance = await callContract.deployed();\n\n\n    msg.payload.args.push({\n            from: msg.payload.from,\n            gas: 3000000\n          });\n\n      let call = await Promise.promisify(web3.eth.contract(factories.sm.UserManager.abi)\n        .at(callContractInstance.address).addCBE.call)(...msg.payload.args);\n          \n      let hash = await web3.eth.contract(factories.sm.UserManager.abi)\n      .at(callContractInstance.address).addCBE.getData(...msg.payload.args);\n              \n\nconst nonce = await Promise.promisify(web3.eth.getTransactionCount)(msg.payload.from);\nconst gasPrice = await Promise.promisify(web3.eth.getGasPrice)();\n\nconst txParams = {\n  nonce: web3.toHex(nonce),\n  gasPrice: web3.toHex(gasPrice),\n  gasLimit: web3.toHex(3000000),\n  to: '0x0000000000000000000000000000000000000000',\n  value: '0x00',\n  data: hash\n}\n              \n              \n    msg.payload = {\n        txParams: txParams,\n        call: call\n    };          \n              \nreturn msg;","outputs":1,"noerr":7,"x":346,"y":135,"wires":[["4c8b8f08.ca0e9"]]},{"id":"a8f6c88d.c37398","type":"http in","z":0,"name":"sc broadcast","url":"/sc/broadcast","method":"post","upload":false,"swaggerDoc":"","x":167,"y":250,"wires":[["b5773e2.44d9ec","bba18ffb.8868d"]]},{"id":"87b2893b.7534c8","type":"http response","z":0,"name":"","statusCode":"","x":564.5,"y":252.75,"wires":[]},{"id":"b5773e2.44d9ec","type":"async-function","z":0,"name":"","func":"const factories = global.get('factories');\nconst _ = global.get('_');\nconst web3 = global.get('web3');\n\nnode.log('inside!');\nlet result = await Promise.promisify(web3.eth.sendRawTransaction)(msg.payload.tx).timeout(1000);\nlet blockConfirmations = 1;\n\nawait new Promise(res=>{ \n let filter = web3.eth.filter('latest');\n filter.watch(async function(err, blockHash) {\n    if (blockConfirmations>2) {\n      await Promise.promisify(filter.stopWatching).bind(filter)();\n      filter = null;\n      console.warn('!! Tx expired !!');\n      return res();\n    }\n    blockConfirmations++;\n\n  });\n});\n\nmsg.payload = {\n    result: result\n}\n\nreturn msg;","outputs":1,"noerr":11,"x":345,"y":253,"wires":[["87b2893b.7534c8","bba18ffb.8868d"]]},{"id":"d8b9de89.6651b","type":"catch","z":0,"name":"","scope":null,"x":155,"y":566,"wires":[["637d8fb0.21672","766f48e2.48f078"]]},{"id":"2239c80.b55f838","type":"http response","z":0,"name":"","statusCode":"","x":612,"y":567,"wires":[]},{"id":"637d8fb0.21672","type":"function","z":0,"name":"transform","func":"\nlet factories = global.get(\"factories\"); \n\nmsg.payload = factories.messages.generic.fail;\n    \nreturn msg;","outputs":1,"noerr":0,"x":396,"y":566,"wires":[["2239c80.b55f838"]]},{"id":"766f48e2.48f078","type":"debug","z":0,"name":"","active":true,"console":"false","complete":"error","x":368,"y":500,"wires":[]},{"id":"bba18ffb.8868d","type":"debug","z":0,"name":"","active":true,"console":"false","complete":"false","x":516,"y":198,"wires":[]}]}
  }, {upsert: true}, done);
};

module.exports.down = function (done) {
  let coll = this.db.collection(`${_.get(config, 'nodered.mongo.collectionPrefix', '')}noderedstorages`);
  coll.remove({"path":"0","type":"flows"}, done);
};
